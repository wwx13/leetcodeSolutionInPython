#二分查找
ef binrary_search(ls,start,end,n):
    temp=ls[int((start+end)/2)]
    if n>temp:
        start=int((start+end)/2)
    elif n<temp:
        end=int((start+end)/2)
    elif temp==n:
        print("find ",n)
        return True
    if end-start==1:
        if ls[start]==n or ls[end]==n:
            print("find",n)
            return True
        else:
            print("no find")
            return False
    return binrary_search(ls,start,end,n)           #一定要有return
# binrary_search([1,2,3,4,5,6,7,8,9],0,8,7)


#计算x^3-5x^2+10x-80
#通过求导得知导数恒大于0，该函数为增，代入0，100点发现一正一负，则得到的值必然位于期间 二分求值  使得某个整数误差小于10^-6
def calculate_fx(value):
    return value*value*value-5*value*value+10*value-80
def get_res(ls,start,end):
    value=ls[int((start+end)/2)]
    if calculate_fx(value)<10**-6 or calculate_fx(value)==10**-6:
        return value
    if calculate_fx(value)>10**-6:
        end=int((start+end)/2)
    return get_res(ls,start,end)
print(get_res([i for i in range(1,101)],0,99))

#在指定有序序列里找到是否存在两个整数相加和为m
#输出示例：
#   find 37
#   791
#   True
#表示在序列里的791和37刚好相加是指定的m  828
#算法复杂度为n*log(n)        
import random
def get_sum_to_n(ls,n):
    for i in ls:
        newls=ls[ls.index(i)+1:]
        if binrary_search(newls,0,len(newls)-1,n-i):
            print(i)
            return True
    return False
print(get_sum_to_n([random.randint(1,10000) for i in range(1,10001)],828))
