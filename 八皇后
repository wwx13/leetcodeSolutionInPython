#八皇后问题  递归回溯(深度优先的递归实现)    O(n**n)
def check(ls):
    n=len(ls)
    if n==1:
        return True
    for i in range(0,n):
        for j in range(0,n):
            if i!=j:
                if abs(i-j)==abs(ls[i]-ls[j]) or ls[i]==ls[j]:  #对角线  和同列  不能相同
                    return False
    return True
ls=[-1,-1,-1,-1,-1,-1,-1,-1]  #初始化
def queen_problem(k):
    if k==8:
        print(ls)#存储使用yield()方法   这里只是输出所有结果
        return True
    else:
        for i in range(0,8):
            ls[k]=i
            ls[k+1:]=[-1 for i in range(k+1,8)]  #回溯必须还原后面的值为-1
            if  check(ls[0:k+1]):
                queen_problem(k+1)

#非递归的广度优先实现   队列和 节点
class Node:
    def __init__(self,val,p):
        self.val=val
        self.parent=p

#O(n**n)
def iter_queen(n):
    q=[]
    c=0
    M=[i for i in range(n)]
    node_count=-1
    for q_i in M:
        node_count+=1
        q.insert(0,Node(q_i,None))

    while q!=[]:

        tempnode=q.pop()
        route=[]
        s=tempnode
        while tempnode!=None:
            route.append(tempnode.val)
            tempnode=tempnode.parent
        route=[m for m in reversed(route)]
        for x in M:
            sig=0
            for index,v in enumerate(route):
                if abs(len(route)-index)==abs(x-v) or len(route)==index or x==v:
                    sig=1
                    break
            if sig==0:
                node_count+=1
                q.insert(0,Node(x,s))
                if len(route)+1==n:
                    c+=1
                    print([m for m in reversed(route)]+[x]," ",c)

iter_queen(8)
